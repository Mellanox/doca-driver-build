// Code generated by mockery v2.53.3. DO NOT EDIT.

package netlink

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	netlink "github.com/Mellanox/doca-driver-build/entrypoint/internal/netconfig/netlink"
	vishvanandanetlink "github.com/vishvananda/netlink"
)

// Lib is an autogenerated mock type for the Lib type
type Lib struct {
	mock.Mock
}

type Lib_Expecter struct {
	mock *mock.Mock
}

func (_m *Lib) EXPECT() *Lib_Expecter {
	return &Lib_Expecter{mock: &_m.Mock}
}

// GetLink provides a mock function with given fields: link
func (_m *Lib) GetLink(link netlink.Link) vishvanandanetlink.Link {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for GetLink")
	}

	var r0 vishvanandanetlink.Link
	if rf, ok := ret.Get(0).(func(netlink.Link) vishvanandanetlink.Link); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vishvanandanetlink.Link)
		}
	}

	return r0
}

// Lib_GetLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLink'
type Lib_GetLink_Call struct {
	*mock.Call
}

// GetLink is a helper method to define mock.On call
//   - link netlink.Link
func (_e *Lib_Expecter) GetLink(link interface{}) *Lib_GetLink_Call {
	return &Lib_GetLink_Call{Call: _e.mock.On("GetLink", link)}
}

func (_c *Lib_GetLink_Call) Run(run func(link netlink.Link)) *Lib_GetLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netlink.Link))
	})
	return _c
}

func (_c *Lib_GetLink_Call) Return(_a0 vishvanandanetlink.Link) *Lib_GetLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Lib_GetLink_Call) RunAndReturn(run func(netlink.Link) vishvanandanetlink.Link) *Lib_GetLink_Call {
	_c.Call.Return(run)
	return _c
}

// LinkByName provides a mock function with given fields: name
func (_m *Lib) LinkByName(name string) (netlink.Link, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for LinkByName")
	}

	var r0 netlink.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (netlink.Link, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lib_LinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkByName'
type Lib_LinkByName_Call struct {
	*mock.Call
}

// LinkByName is a helper method to define mock.On call
//   - name string
func (_e *Lib_Expecter) LinkByName(name interface{}) *Lib_LinkByName_Call {
	return &Lib_LinkByName_Call{Call: _e.mock.On("LinkByName", name)}
}

func (_c *Lib_LinkByName_Call) Run(run func(name string)) *Lib_LinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Lib_LinkByName_Call) Return(_a0 netlink.Link, _a1 error) *Lib_LinkByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Lib_LinkByName_Call) RunAndReturn(run func(string) (netlink.Link, error)) *Lib_LinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetDown provides a mock function with given fields: link
func (_m *Lib) LinkSetDown(link netlink.Link) error {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetDown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Lib_LinkSetDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetDown'
type Lib_LinkSetDown_Call struct {
	*mock.Call
}

// LinkSetDown is a helper method to define mock.On call
//   - link netlink.Link
func (_e *Lib_Expecter) LinkSetDown(link interface{}) *Lib_LinkSetDown_Call {
	return &Lib_LinkSetDown_Call{Call: _e.mock.On("LinkSetDown", link)}
}

func (_c *Lib_LinkSetDown_Call) Run(run func(link netlink.Link)) *Lib_LinkSetDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netlink.Link))
	})
	return _c
}

func (_c *Lib_LinkSetDown_Call) Return(_a0 error) *Lib_LinkSetDown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Lib_LinkSetDown_Call) RunAndReturn(run func(netlink.Link) error) *Lib_LinkSetDown_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetHardwareAddr provides a mock function with given fields: link, hwaddr
func (_m *Lib) LinkSetHardwareAddr(link netlink.Link, hwaddr net.HardwareAddr) error {
	ret := _m.Called(link, hwaddr)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetHardwareAddr")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, net.HardwareAddr) error); ok {
		r0 = rf(link, hwaddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Lib_LinkSetHardwareAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetHardwareAddr'
type Lib_LinkSetHardwareAddr_Call struct {
	*mock.Call
}

// LinkSetHardwareAddr is a helper method to define mock.On call
//   - link netlink.Link
//   - hwaddr net.HardwareAddr
func (_e *Lib_Expecter) LinkSetHardwareAddr(link interface{}, hwaddr interface{}) *Lib_LinkSetHardwareAddr_Call {
	return &Lib_LinkSetHardwareAddr_Call{Call: _e.mock.On("LinkSetHardwareAddr", link, hwaddr)}
}

func (_c *Lib_LinkSetHardwareAddr_Call) Run(run func(link netlink.Link, hwaddr net.HardwareAddr)) *Lib_LinkSetHardwareAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netlink.Link), args[1].(net.HardwareAddr))
	})
	return _c
}

func (_c *Lib_LinkSetHardwareAddr_Call) Return(_a0 error) *Lib_LinkSetHardwareAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Lib_LinkSetHardwareAddr_Call) RunAndReturn(run func(netlink.Link, net.HardwareAddr) error) *Lib_LinkSetHardwareAddr_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetMTU provides a mock function with given fields: link, mtu
func (_m *Lib) LinkSetMTU(link netlink.Link, mtu int) error {
	ret := _m.Called(link, mtu)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetMTU")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, int) error); ok {
		r0 = rf(link, mtu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Lib_LinkSetMTU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetMTU'
type Lib_LinkSetMTU_Call struct {
	*mock.Call
}

// LinkSetMTU is a helper method to define mock.On call
//   - link netlink.Link
//   - mtu int
func (_e *Lib_Expecter) LinkSetMTU(link interface{}, mtu interface{}) *Lib_LinkSetMTU_Call {
	return &Lib_LinkSetMTU_Call{Call: _e.mock.On("LinkSetMTU", link, mtu)}
}

func (_c *Lib_LinkSetMTU_Call) Run(run func(link netlink.Link, mtu int)) *Lib_LinkSetMTU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netlink.Link), args[1].(int))
	})
	return _c
}

func (_c *Lib_LinkSetMTU_Call) Return(_a0 error) *Lib_LinkSetMTU_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Lib_LinkSetMTU_Call) RunAndReturn(run func(netlink.Link, int) error) *Lib_LinkSetMTU_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetUp provides a mock function with given fields: link
func (_m *Lib) LinkSetUp(link netlink.Link) error {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for LinkSetUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link) error); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Lib_LinkSetUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetUp'
type Lib_LinkSetUp_Call struct {
	*mock.Call
}

// LinkSetUp is a helper method to define mock.On call
//   - link netlink.Link
func (_e *Lib_Expecter) LinkSetUp(link interface{}) *Lib_LinkSetUp_Call {
	return &Lib_LinkSetUp_Call{Call: _e.mock.On("LinkSetUp", link)}
}

func (_c *Lib_LinkSetUp_Call) Run(run func(link netlink.Link)) *Lib_LinkSetUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(netlink.Link))
	})
	return _c
}

func (_c *Lib_LinkSetUp_Call) Return(_a0 error) *Lib_LinkSetUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Lib_LinkSetUp_Call) RunAndReturn(run func(netlink.Link) error) *Lib_LinkSetUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewLib creates a new instance of Lib. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLib(t interface {
	mock.TestingT
	Cleanup(func())
}) *Lib {
	mock := &Lib{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
