// Code generated by mockery v2.53.3. DO NOT EDIT.

package netlink

import (
	mock "github.com/stretchr/testify/mock"

	netlink "github.com/vishvananda/netlink"
)

// Link is an autogenerated mock type for the Link type
type Link struct {
	mock.Mock
}

type Link_Expecter struct {
	mock *mock.Mock
}

func (_m *Link) EXPECT() *Link_Expecter {
	return &Link_Expecter{mock: &_m.Mock}
}

// Attrs provides a mock function with no fields
func (_m *Link) Attrs() *netlink.LinkAttrs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Attrs")
	}

	var r0 *netlink.LinkAttrs
	if rf, ok := ret.Get(0).(func() *netlink.LinkAttrs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netlink.LinkAttrs)
		}
	}

	return r0
}

// Link_Attrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attrs'
type Link_Attrs_Call struct {
	*mock.Call
}

// Attrs is a helper method to define mock.On call
func (_e *Link_Expecter) Attrs() *Link_Attrs_Call {
	return &Link_Attrs_Call{Call: _e.mock.On("Attrs")}
}

func (_c *Link_Attrs_Call) Run(run func()) *Link_Attrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Link_Attrs_Call) Return(_a0 *netlink.LinkAttrs) *Link_Attrs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Link_Attrs_Call) RunAndReturn(run func() *netlink.LinkAttrs) *Link_Attrs_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *Link) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Link_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type Link_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *Link_Expecter) Type() *Link_Type_Call {
	return &Link_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *Link_Type_Call) Run(run func()) *Link_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Link_Type_Call) Return(_a0 string) *Link_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Link_Type_Call) RunAndReturn(run func() string) *Link_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewLink creates a new instance of Link. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLink(t interface {
	mock.TestingT
	Cleanup(func())
}) *Link {
	mock := &Link{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
