// Code generated by mockery v2.46.3. DO NOT EDIT.

package cmd

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// IsCommandNotFound provides a mock function with given fields: err
func (_m *Interface) IsCommandNotFound(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsCommandNotFound")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Interface_IsCommandNotFound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCommandNotFound'
type Interface_IsCommandNotFound_Call struct {
	*mock.Call
}

// IsCommandNotFound is a helper method to define mock.On call
//   - err error
func (_e *Interface_Expecter) IsCommandNotFound(err interface{}) *Interface_IsCommandNotFound_Call {
	return &Interface_IsCommandNotFound_Call{Call: _e.mock.On("IsCommandNotFound", err)}
}

func (_c *Interface_IsCommandNotFound_Call) Run(run func(err error)) *Interface_IsCommandNotFound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Interface_IsCommandNotFound_Call) Return(_a0 bool) *Interface_IsCommandNotFound_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_IsCommandNotFound_Call) RunAndReturn(run func(error) bool) *Interface_IsCommandNotFound_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommand provides a mock function with given fields: ctx, command, args
func (_m *Interface) RunCommand(ctx context.Context, command string, args ...string) (string, string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunCommand")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (string, string, error)); ok {
		return rf(ctx, command, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) string); ok {
		r0 = rf(ctx, command, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) string); ok {
		r1 = rf(ctx, command, args...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, ...string) error); ok {
		r2 = rf(ctx, command, args...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Interface_RunCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommand'
type Interface_RunCommand_Call struct {
	*mock.Call
}

// RunCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - args ...string
func (_e *Interface_Expecter) RunCommand(ctx interface{}, command interface{}, args ...interface{}) *Interface_RunCommand_Call {
	return &Interface_RunCommand_Call{Call: _e.mock.On("RunCommand",
		append([]interface{}{ctx, command}, args...)...)}
}

func (_c *Interface_RunCommand_Call) Run(run func(ctx context.Context, command string, args ...string)) *Interface_RunCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Interface_RunCommand_Call) Return(_a0 string, _a1 string, _a2 error) *Interface_RunCommand_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Interface_RunCommand_Call) RunAndReturn(run func(context.Context, string, ...string) (string, string, error)) *Interface_RunCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
